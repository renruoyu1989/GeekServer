// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Formatters.Geek.Client.Config
{
    public sealed class t_testBeanDeserializeProxyDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Geek.Client.Config.t_testBeanDeserializeProxyData>
    {
        // t_id
        private static global::System.ReadOnlySpan<byte> GetSpan_t_id() => new byte[1 + 4] { 164, 116, 95, 105, 100 };
        // t_mult
        private static global::System.ReadOnlySpan<byte> GetSpan_t_mult() => new byte[1 + 6] { 166, 116, 95, 109, 117, 108, 116 };
        // t_str
        private static global::System.ReadOnlySpan<byte> GetSpan_t_str() => new byte[1 + 5] { 165, 116, 95, 115, 116, 114 };
        // t_str2
        private static global::System.ReadOnlySpan<byte> GetSpan_t_str2() => new byte[1 + 6] { 166, 116, 95, 115, 116, 114, 50 };
        // t_int
        private static global::System.ReadOnlySpan<byte> GetSpan_t_int() => new byte[1 + 5] { 165, 116, 95, 105, 110, 116 };
        // t_int2
        private static global::System.ReadOnlySpan<byte> GetSpan_t_int2() => new byte[1 + 6] { 166, 116, 95, 105, 110, 116, 50 };
        // t_long
        private static global::System.ReadOnlySpan<byte> GetSpan_t_long() => new byte[1 + 6] { 166, 116, 95, 108, 111, 110, 103 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Geek.Client.Config.t_testBeanDeserializeProxyData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_t_id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_id, options);
            writer.WriteRaw(GetSpan_t_mult());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_mult, options);
            writer.WriteRaw(GetSpan_t_str());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.t_str, options);
            writer.WriteRaw(GetSpan_t_str2());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.t_str2, options);
            writer.WriteRaw(GetSpan_t_int());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_int, options);
            writer.WriteRaw(GetSpan_t_int2());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.t_int2, options);
            writer.WriteRaw(GetSpan_t_long());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<long>>(formatterResolver).Serialize(ref writer, value.t_long, options);
        }

        public global::Geek.Client.Config.t_testBeanDeserializeProxyData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Geek.Client.Config.t_testBeanDeserializeProxyData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1684627316UL) { goto FAIL; }

                        ____result.t_id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 128009175392116UL:
                                ____result.t_mult = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 55467161378676UL:
                                ____result.t_str2 = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 55475649994612UL:
                                ____result.t_int2 = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 113724013436788UL:
                                ____result.t_long = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<long>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 491579989876UL:
                                ____result.t_str = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 500068605812UL:
                                ____result.t_int = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
